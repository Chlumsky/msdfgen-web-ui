
// Generated by json-cpp-gen by Viktor Chlumsky
// https://github.com/Chlumsky/json-cpp-gen

#pragma once

#include <string>
#include "Settings.h"

class SettingsParser {

public:
    struct Error {
        enum Type {
            OK,
            JSON_SYNTAX_ERROR,
            UNEXPECTED_END_OF_FILE,
            TYPE_MISMATCH,
            ARRAY_SIZE_MISMATCH,
            UNKNOWN_ENUM_VALUE,
            UNKNOWN_KEY,
            MISSING_KEY,
            REPEATED_KEY,
            VALUE_OUT_OF_RANGE,
            STRING_EXPECTED,
            UTF16_ENCODING_ERROR
        } type;
        int position;

        inline Error(Type type = Error::OK, int position = -1) : type(type), position(position) { }
        operator Type() const;
        operator bool() const;
        const char *typeString() const;
    };

    static Error parse(Settings &output, const char *jsonString);

protected:
    const char *cur;
    std::string buffer;

    explicit SettingsParser(const char *str);
    void skipWhitespace();
    Error::Type skipValue();
    bool matchSymbol(char s);
    bool readHexQuad(int &value);
    Error::Type unescape(char *codepoints);
    static bool isAlphanumeric(char c);
    static int decodeHexDigit(char digit);

    Error::Type parseStdString(std::string &value);
    Error::Type parseDouble(double &value);
    Error::Type parseSettingsFormat(Settings::Format &value);
    Error::Type parseInt(int &value);
    Error::Type parseSettingsPlacementMode(Settings::PlacementMode &value);
    Error::Type parseSettingsRangeUnits(Settings::RangeUnits &value);
    Error::Type parseSettingsScaleMode(Settings::ScaleMode &value);
    Error::Type parseSettingsType(Settings::Type &value);
    Error::Type parseSettings(Settings &value);

private:
    template <typename T>
    Error::Type readSigned(T &value);

};
