
// Generated by json-cpp-gen by Viktor Chlumsky
// https://github.com/Chlumsky/json-cpp-gen

#include <cstdlib>
#include "SettingsParser.h"

#ifndef JSON_CPP_MAX_INTEGER
#define JSON_CPP_MAX_INTEGER(T) ((T) ~(((T) ~(T) 0 <= (T) 0 ? -2 : 0)*((T) 1<<(8*sizeof(T)-2))))
#endif

SettingsParser::Error::operator SettingsParser::Error::Type() const {
    return type;
}

SettingsParser::Error::operator bool() const {
    return type != Error::OK;
}

const char *SettingsParser::Error::typeString() const {
    switch (type) {
        case Error::OK:
            return "OK";
        case Error::JSON_SYNTAX_ERROR:
            return "JSON_SYNTAX_ERROR";
        case Error::UNEXPECTED_END_OF_FILE:
            return "UNEXPECTED_END_OF_FILE";
        case Error::TYPE_MISMATCH:
            return "TYPE_MISMATCH";
        case Error::ARRAY_SIZE_MISMATCH:
            return "ARRAY_SIZE_MISMATCH";
        case Error::UNKNOWN_ENUM_VALUE:
            return "UNKNOWN_ENUM_VALUE";
        case Error::UNKNOWN_KEY:
            return "UNKNOWN_KEY";
        case Error::MISSING_KEY:
            return "MISSING_KEY";
        case Error::REPEATED_KEY:
            return "REPEATED_KEY";
        case Error::VALUE_OUT_OF_RANGE:
            return "VALUE_OUT_OF_RANGE";
        case Error::STRING_EXPECTED:
            return "STRING_EXPECTED";
        case Error::UTF16_ENCODING_ERROR:
            return "UTF16_ENCODING_ERROR";
    }
    return "";
}

SettingsParser::SettingsParser(const char *str) : cur(str) { }

void SettingsParser::skipWhitespace() {
    while (*cur == ' ' || *cur == '\t' || *cur == '\r' || *cur == '\n')
        ++cur;
}

SettingsParser::Error::Type SettingsParser::skipValue() {
    skipWhitespace();
    switch (*cur) {
        case '\0':
            return Error::UNEXPECTED_END_OF_FILE;
        case '"':
            while (*++cur != '"') {
                if (!*(cur += *cur == '\\'))
                    return Error::UNEXPECTED_END_OF_FILE;
            }
            ++cur;
            return Error::OK;
        case '[': case '{':
            ++cur;
            for (int openBrackets = 1; openBrackets;) {
                switch (*cur) {
                    case '\0':
                        return Error::UNEXPECTED_END_OF_FILE;
                    case '"':
                        if (Error::Type error = skipValue())
                            return error;
                        continue;
                    case '[': case '{':
                        ++openBrackets;
                        break;
                    case ']': case '}':
                        --openBrackets;
                        break;
                }
                ++cur;
            }
            return Error::OK;
        default:
            if (isAlphanumeric(*cur) || *cur == '-' || *cur == '.') {
                while (isAlphanumeric(*++cur) || *cur == '+' || *cur == '-' || *cur == '.');
                return Error::OK;
            }
    }
    return Error::JSON_SYNTAX_ERROR;
}

bool SettingsParser::matchSymbol(char s) {
    skipWhitespace();
    if (*cur == s) {
        ++cur;
        return true;
    }
    return false;
}

bool SettingsParser::readHexQuad(int &value) {
    return (
        cur[0] && cur[1] && cur[2] && cur[3] &&
        (value = decodeHexDigit(cur[3])) >= 0 &&
        (value += 0x0010*decodeHexDigit(cur[2])) >= 0 &&
        (value += 0x0100*decodeHexDigit(cur[1])) >= 0 &&
        (value += 0x1000*decodeHexDigit(cur[0])) >= 0 &&
        (cur += 4, true)
    );
}

bool SettingsParser::isAlphanumeric(char c) {
    switch (c) {
        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G': case 'H': case 'I':
        case 'J': case 'K': case 'L': case 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':
        case 'S': case 'T': case 'U': case 'V': case 'W': case 'X': case 'Y': case 'Z':
        case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g': case 'h': case 'i':
        case 'j': case 'k': case 'l': case 'm': case 'n': case 'o': case 'p': case 'q': case 'r':
        case 's': case 't': case 'u': case 'v': case 'w': case 'x': case 'y': case 'z':
        case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            return true;
        default:
            return false;
    }
}

int SettingsParser::decodeHexDigit(char digit) {
    switch (digit) {
        case '0': return 0x00;
        case '1': return 0x01;
        case '2': return 0x02;
        case '3': return 0x03;
        case '4': return 0x04;
        case '5': return 0x05;
        case '6': return 0x06;
        case '7': return 0x07;
        case '8': return 0x08;
        case '9': return 0x09;
        case 'A': case 'a': return 0x0a;
        case 'B': case 'b': return 0x0b;
        case 'C': case 'c': return 0x0c;
        case 'D': case 'd': return 0x0d;
        case 'E': case 'e': return 0x0e;
        case 'F': case 'f': return 0x0f;
    }
    return -1;
}

template <typename T>
SettingsParser::Error::Type SettingsParser::readSigned(T &value) {
    bool negative = *cur == '-' && (++cur, true);
    if (*cur >= '0' && *cur <= '9')
        value = *cur++-'0';
    else
        return Error::TYPE_MISMATCH;
    while (*cur >= '0' && *cur <= '9') {
        if (value < 0 || (value >= JSON_CPP_MAX_INTEGER(T)/10 && (value > JSON_CPP_MAX_INTEGER(T)/10 || (static_cast<T>(10*value+(*cur-'0')) < value && (!negative || *cur-'0' != (JSON_CPP_MAX_INTEGER(T)-9)%10)))))
            return Error::VALUE_OUT_OF_RANGE;
        value = static_cast<T>(10*value+(*cur++-'0'));
    }
    if (negative)
        value = -value;
    return Error::OK;
}

SettingsParser::Error SettingsParser::parse(Settings &output, const char *jsonString) {
    SettingsParser parser(jsonString);
    Error::Type error = parser.parseSettings(output);
    return Error(error, static_cast<int>(parser.cur-jsonString));
}

SettingsParser::Error::Type SettingsParser::parseStdString(std::string &value) {
    if (!matchSymbol('"'))
        return Error::STRING_EXPECTED;
    value.clear();
    while (*cur != '"') {
        if (*cur == '\\') {
            ++cur;
            switch (*cur++) {
                case '\0':
                    --cur;
                    return Error::UNEXPECTED_END_OF_FILE;
                case 'B': case 'b': value.push_back('\b'); break;
                case 'F': case 'f': value.push_back('\f'); break;
                case 'N': case 'n': value.push_back('\n'); break;
                case 'R': case 'r': value.push_back('\r'); break;
                case 'T': case 't': value.push_back('\t'); break;
                case 'U': case 'u': {
                    unsigned long cp;
                    int wc;
                    if (!readHexQuad(wc))
                        return Error::JSON_SYNTAX_ERROR;
                    if ((wc&0xfc00) == 0xd800) {
                        if (!(cur[0] == '\\' && (cur[1] == 'u' || cur[1] == 'U')))
                            return Error::UTF16_ENCODING_ERROR;
                        cp = (unsigned long) ((wc&0x03ff)<<10);
                        cur += 2;
                        if (!readHexQuad(wc))
                            return Error::JSON_SYNTAX_ERROR;
                        if ((wc&0xfc00) != 0xdc00)
                            return Error::UTF16_ENCODING_ERROR;
                        cp = 0x010000+(cp|(unsigned long) (wc&0x03ff));
                    } else
                        cp = (unsigned long) wc;
                    if (cp&0xffffff80) {
                        int len;
                        for (len = 1; cp>>(5*len+1) && len < 6; ++len);
                        value.push_back((char) (0xff<<(8-len)|cp>>6*(len-1)));
                        for (int i = 1; i < len; ++i)
                            value.push_back((char) (0x80|(cp>>6*(len-i-1)&0x3f)));
                    } else
                        value.push_back((char) cp);
                    break;
                }
                default:
                    value.push_back(cur[-1]);
            }
            continue;
        }
        if (!*cur)
            return Error::UNEXPECTED_END_OF_FILE;
        value.push_back(*cur);
        ++cur;
    }
    ++cur;
    return Error::OK;
}

SettingsParser::Error::Type SettingsParser::parseDouble(double &value) {
    char *end;
    value = strtod(cur, &end);
    if (end == cur)
        return Error::TYPE_MISMATCH;
    cur = end;
    return Error::OK;
}

SettingsParser::Error::Type SettingsParser::parseSettingsFormat(Settings::Format &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    switch (buffer.size()) {
        case 3:
            if (buffer == "png") {
                value = Settings::Format::png;
                return Error::OK; 
            }
            break;
        case 4:
            if (buffer == "tiff") {
                value = Settings::Format::tiff;
                return Error::OK; 
            }
            break;
    }
    return Error::UNKNOWN_ENUM_VALUE;
}

SettingsParser::Error::Type SettingsParser::parseInt(int &value) {
    skipWhitespace();
    return readSigned(value);
}

SettingsParser::Error::Type SettingsParser::parseSettingsPlacementMode(Settings::PlacementMode &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    switch (buffer.size()) {
        case 11:
            if (buffer == "noTranslate") {
                value = Settings::PlacementMode::noTranslate;
                return Error::OK; 
            }
            break;
        case 12:
            if (buffer == "centerCanvas") {
                value = Settings::PlacementMode::centerCanvas;
                return Error::OK; 
            }
            break;
        case 15:
            if (buffer == "paddedTranslate") {
                value = Settings::PlacementMode::paddedTranslate;
                return Error::OK; 
            }
            break;
        case 17:
            if (buffer == "centerBoundingBox") {
                value = Settings::PlacementMode::centerBoundingBox;
                return Error::OK; 
            }
            break;
    }
    return Error::UNKNOWN_ENUM_VALUE;
}

SettingsParser::Error::Type SettingsParser::parseSettingsRangeUnits(Settings::RangeUnits &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    switch (buffer.size()) {
        case 6:
            if (buffer == "pixels") {
                value = Settings::RangeUnits::pixels;
                return Error::OK; 
            }
            break;
        case 8:
            if (buffer == "svgUnits") {
                value = Settings::RangeUnits::svgUnits;
                return Error::OK; 
            }
            break;
    }
    return Error::UNKNOWN_ENUM_VALUE;
}

SettingsParser::Error::Type SettingsParser::parseSettingsScaleMode(Settings::ScaleMode &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    switch (buffer.size()) {
        case 9:
            if (buffer == "fitCanvas") {
                value = Settings::ScaleMode::fitCanvas;
                return Error::OK; 
            }
            break;
        case 13:
            if (buffer == "explicitScale") {
                value = Settings::ScaleMode::explicitScale;
                return Error::OK; 
            }
            break;
        case 14:
            if (buffer == "fitBoundingBox") {
                value = Settings::ScaleMode::fitBoundingBox;
                return Error::OK; 
            }
            break;
        case 15:
            if (buffer == "fitPaddedCanvas") {
                value = Settings::ScaleMode::fitPaddedCanvas;
                return Error::OK; 
            }
            break;
    }
    return Error::UNKNOWN_ENUM_VALUE;
}

SettingsParser::Error::Type SettingsParser::parseSettingsType(Settings::Type &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    switch (buffer.size()) {
        case 3:
            if (buffer == "sdf") {
                value = Settings::Type::sdf;
                return Error::OK; 
            }
            break;
        case 4:
            switch (buffer[0]) {
                case 'm':
                    if (buffer == "msdf") {
                        value = Settings::Type::msdf;
                        return Error::OK; 
                    }
                    break;
                case 'p':
                    if (buffer == "psdf") {
                        value = Settings::Type::psdf;
                        return Error::OK; 
                    }
                    break;
            }
            break;
        case 5:
            if (buffer == "mtsdf") {
                value = Settings::Type::mtsdf;
                return Error::OK; 
            }
            break;
    }
    return Error::UNKNOWN_ENUM_VALUE;
}

SettingsParser::Error::Type SettingsParser::parseSettings(Settings &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    for (; !matchSymbol('}'); matchSymbol(',')) {
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'b':
                    if (buffer == "baseRange") {
                        if (Error error = parseDouble(value.baseRange))
                            return error;
                        continue;
                    }
                    break;
                case 'e':
                    if (buffer == "explicitScale") {
                        if (Error error = parseDouble(value.explicitScale))
                            return error;
                        continue;
                    }
                    break;
                case 'f':
                    if (buffer == "format") {
                        if (Error error = parseSettingsFormat(value.format))
                            return error;
                        continue;
                    }
                    break;
                case 'h':
                    if (buffer == "height") {
                        if (Error error = parseInt(value.height))
                            return error;
                        continue;
                    }
                    break;
                case 'i':
                    if (buffer == "innerRange") {
                        if (Error error = parseDouble(value.innerRange))
                            return error;
                        continue;
                    }
                    break;
                case 'm':
                    if (buffer == "miterLimit") {
                        if (Error error = parseDouble(value.miterLimit))
                            return error;
                        continue;
                    }
                    break;
                case 'o':
                    if (buffer == "outerRange") {
                        if (Error error = parseDouble(value.outerRange))
                            return error;
                        continue;
                    }
                    break;
                case 'p':
                    if (buffer == "placementMode") {
                        if (Error error = parseSettingsPlacementMode(value.placementMode))
                            return error;
                        continue;
                    }
                    break;
                case 'r':
                    if (buffer == "rangeUnits") {
                        if (Error error = parseSettingsRangeUnits(value.rangeUnits))
                            return error;
                        continue;
                    }
                    break;
                case 's':
                    if (buffer == "scaleMode") {
                        if (Error error = parseSettingsScaleMode(value.scaleMode))
                            return error;
                        continue;
                    }
                    break;
                case 't':
                    if (buffer == "type") {
                        if (Error error = parseSettingsType(value.type))
                            return error;
                        continue;
                    }
                    break;
                case 'w':
                    if (buffer == "width") {
                        if (Error error = parseInt(value.width))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    return Error::OK;
}
